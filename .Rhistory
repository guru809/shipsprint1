Q
runApp('C:/LRL_HTA_NETWORK-master')
wer
vertices_current1
runApp('C:/LRL_HTA_NETWORK-master')
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
.libPaths()
.libPaths()
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
# Call the function new.function supplying 6 as an argument.
new.function(6)
BMI <- 	data.frame(
gender = c("Male", "Male","Female"),
height = c(152, 171.5, 165),
weight = c(81,93, 78),
Age = c(42,38,26)
)
print(BMI)
BMI
View(BMI)
ls()
v <- 6.6:12.6
print(v)
shiny::runApp('C:/LRL_HTA_NETWORK-master')
?gsub
seq_along
arrange()
library(tidyverse)
arrange()
?arrange()
?arrange
arrange
shiny::runApp('C:/Users/g559541/Downloads/priorelcitaion')
runApp('C:/LRL_HTA_NETWORK-master')
runApp('C:/Users/g559541/Downloads/nnw')
shiny:::`%OR%`
install.packages(shiny)
install.packages(c("forestplot", "openssl"))
runApp('C:/Users/g559541/Downloads/nnw')
install.packages('remotes')
remotes::install_github("timelyportfolio/sweetalertR")
runApp('C:/Users/g559541/Downloads/nnw')
install.packages('glmcmp')
install.packages("C://PCK AND GO//glmcmp_2.0.1.tar.gz", repos = NULL, type="source")
install.packages('reshape2')
install.packages('sn')
install.packages('R2WinBUGS')
install.packages("C://PCK AND GO//glmcmp_2.0.1.tar.gz", repos = NULL, type="source")
runApp('C:/Users/g559541/Downloads/nnw')
ds
install.packages('shiny.semantic')
if (interactive()) {
library(shiny)
library(shiny.semantic)
accordion_content <- list(
list(title = "AA", content = h2("a a a a")),
list(title = "BB", content = p("b b b b"))
)
shinyApp(
ui = semanticPage(
accordion(accordion_content, fluid = F, active_title = "AA",
custom_style = "background: #babade;")
),
server = function(input, output) {}
)
}
library(shiny)
library(shiny.semantic)
df<- read.csv("C://Users//g559541//Downloads//ships_04112020//ships.csv")
View(df)
unique(df$DESTINATION)
unique(df$FLAG)
unique(df$SHIPTYPE)
unique(df$PORT)
unique(df$port)
unique(df$is_parked)
unique(df$SHIPNAME)
for (sheep in unique(df$SHIPNAME))
{
print(sheep)
browser()
}
for (sheep in unique(df$SHIPNAME))
{
print(sheep)
shipvals <- df %>% filter(df$SHIPNAME == sheep)
browser()
}
library(shiny)
library(shiny.semantic)
library(dplyr)
sheep
shipvals <- df %>% filter(df$SHIPNAME == sheep)
View(shipvals)
str(shipvals)
aa<-as.Date(shipvals$DATETIME[[1]],format='%Y-%M-%d')
library(lubridate)
t <- ymd_hms(shipvals$DATETIME[[1]])
r
t
shipvals$DATETIME[[1]]
library(data.table)
dt <- data.table(a = 1:3, b = 1:3, d = 1:3)
cols <- c("a", "b")
dt
vignette(package="data.table")
example(data.table)
shipvals
dt[ , (cols) := lapply(.SD, "*", -1), .SDcols = cols]
dt
dt <- data.table(a = 1:3, b = 1:3, d = 1:3)
dt
dt[ , (cols) := lapply(.SD, "*", -2), .SDcols = cols]
str(dt)
str(df)
?read_csv2
install.packages("readr")
?read_csv2
str(shipvals)
shipvals <- df %>%
as_tibble() %>%
filter(df$SHIPNAME == sheep)
str(shipvals)
shipvals <- df %>%
as_tibble() %>%
filter(df$SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(df$DATETIME)
)
df %>%
as_tibble() %>%
filter(df$SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(df$DATETIME)
)
starwars %>%
select(name, mass) %>%
mutate(
mass2 = mass * 2,
mass2_squared = mass2 * mass2
)
df %>%
as_tibble() %>%
filter(df$SHIPNAME == sheep)
df %>%
as_tibble() %>%
filter(SHIPNAME == sheep)
df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
)
shipval <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
)
str(shipval)
shipval <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime)
View(shipval)
install.packages(geosphere)
install.packages('geosphere)
install.packages('geosphere')
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
df = data.frame(Lat = 1:10, Long = rnorm(10))
leaflet(df) %>% addCircles()
m = leaflet() %>% addTiles()
df = data.frame(
lat = rnorm(100),
lng = rnorm(100),
size = runif(100, 5, 20),
color = sample(colors(), 100)
)
m = leaflet(df) %>% addTiles()
m %>% addCircleMarkers(radius = ~size, color = ~color, fill = FALSE)
m %>% addCircleMarkers(radius = runif(100, 4, 10), color = c('red'))
shipval$LAT
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime) %>%
select(LAT, LON)
df<- read.csv("C://Users//g559541//Downloads//ships_04112020//ships.csv")
sheep <- unique(df$SHIPNAME)[[1]]
sheep
sheep <- unique(df$SHIPNAME)[[2]]
sheep
unique(df$SHIPNAME)
df<- read.csv("C://Users//g559541//Downloads//ships_04112020//ships.csv")
unique(df$SHIPNAME)
sheep <- unique(df$SHIPNAME)[[2]]
sheep
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime) %>%
select(LAT, LON)
shipval1
shipval1[[1][1]]
shipval1[1]
shipval1[1][2]
shipval1[1]
shipval1[[1]
}
shipval1[[1]]
shipval1[[2]]
shipval1
shipval1[1][1]
shipval1[1][1]k[1]
shipval1[1][1][1]
shipval1[1][2]
shipval1[[1]
]
shipval1
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime) %>%
select(LAT, LON) %>%
data.matrix(rownames.force = NA)
shipval1
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime) %>%
select(LAT, LON) #%>%
#data.matrix(rownames.force = NA)
library(leaflet)
yourMap <- leaflet(shipval1) %>% addTiles() %>% addCircles(lng = ~LON, lat = ~LAT)
yourMap
sheep <- unique(df$SHIPNAME)[[1]]
sheep
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime) %>%
select(LAT, LON) #%>%
library(leaflet)
yourMap <- leaflet(shipval1) %>% addTiles() %>% addCircles(lng = ~LON, lat = ~LAT)
yourMap
cols(df)
colnames(df)
line <- rbind(c(-180,-20), c(-150,-10), c(-140,55), c(10, 0), c(-140,-60))
pnts <- rbind(c(-170,0), c(-75,0), c(-70,-10), c(-80,20), c(-100,-50),
c(-100,-60), c(-100,-40), c(-100,-20), c(-100,-10), c(-100,0))
d = dist2Line(pnts, line)
plot( makeLine(line), type='l')
points(line)
points(pnts, col='blue', pch=20)
points(d[,2], d[,3], col='red', pch='x')
for (i in 1:nrow(d)) lines(gcIntermediate(pnts[i,], d[i,2:3], 10), lwd=2)
line <- rbind(c(-180,-20), c(-150,-10), c(-140,55), c(10, 0), c(-140,-60))
pnts <- rbind(c(-170,0), c(-75,0), c(-70,-10), c(-80,20), c(-100,-50),
c(-100,-60), c(-100,-40), c(-100,-20), c(-100,-10), c(-100,0))
d = dist2Line(pnts, line)
plot( makeLine(line), type='l')
points(line)
points(pnts, col='blue', pch=20)
points(d[,2], d[,3], col='red', pch='x')
for (i in 1:nrow(d)) lines(gcIntermediate(pnts[i,], d[i,2:3], 10), lwd=2)
line <- rbind(c(-180,-20), c(-150,-10), c(-140,55), c(10, 0), c(-140,-60))
pnts <- rbind(c(-170,0), c(-75,0), c(-70,-10), c(-80,20), c(-100,-50),
c(-100,-60), c(-100,-40), c(-100,-20), c(-100,-10), c(-100,0))
d = dist2Line(pnts, line)
plot( makeLine(line), type='l')
library(geosphere)
line <- rbind(c(-180,-20), c(-150,-10), c(-140,55), c(10, 0), c(-140,-60))
pnts <- rbind(c(-170,0), c(-75,0), c(-70,-10), c(-80,20), c(-100,-50),
c(-100,-60), c(-100,-40), c(-100,-20), c(-100,-10), c(-100,0))
d = dist2Line(pnts, line)
plot( makeLine(line), type='l')
points(line)
points(pnts, col='blue', pch=20)
points(d[,2], d[,3], col='red', pch='x')
d
plot( makeLine(line), type='l')
points(line)
plot( makeLine(line), type='l')
points(line)
points(pnts, col='blue', pch=20)
points(d[,2], d[,3], col='red', pch='x')
for (i in 1:nrow(d)) lines(gcIntermediate(pnts[i,], d[i,2:3], 10), lwd=2)
d
distGeo(c(0,0),c(90,90))
scrambled <- slice_sample(tibble(year = 2000:2005, value = (0:5) ^ 2), prop = 1)
wrong <- mutate(scrambled, previous_year_value = lag(value))
arrange(wrong, year)
scrambled
wrong <- mutate(scrambled, previous_year_value = lag(value))
wrong
?distGeo
colnames(df)
distGeo(c(df$LAT,df$LON)
)
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime)
shipval2 <- shipval1 %>%
select(LAT, LON) %.%
data.matrix(rownames.force = NA)
shipval2 <- shipval1 %>%
select(LAT, LON) %>%
data.matrix(rownames.force = NA)
shipval2
ss<-distGeo(shipval2, a=6378137, f=1/298.257223563)
ss
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
distGeo(shipval2, a=6378137, f=1/298.257223563))
distGeo(shipval2, a=6378137, f=1/298.257223563).
distGeo(shipval2, a=6378137, f=1/298.257223563)
length(distGeo(shipval2, a=6378137, f=1/298.257223563))
length(shipval2)
shipval2 <- shipval1 %>%
select(LON,LAT) %>%
data.matrix(rownames.force = NA)
length(shipval2)
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
length(shipval1)
shipval1
shipval2
ssss<-distGeo(shipval2, a=6378137, f=1/298.257223563))
ssss<-distGeo(shipval2, a=6378137, f=1/298.257223563)
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
View(shipval1)
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
shipval1<-shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime)
shipval2 <- shipval1 %>%
select(LON,LAT) %>%
data.matrix(rownames.force = NA)
shipval3<-shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
View(shipval2)
View(shipval3)
distGeo(c(18.99692,54.77127
),c(18.99361,54.76542), a=6378137, f=1/298.257223563)
shipval3<-shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
%>%
slice(which.max(distns))
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
%>%slice(which.max(distns))
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563))
%>% slice(which.max(distns))
shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563)) %>%
slice(which.max(distns))
shipval4<-shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563)) %>%
slice(which.max(distns))
shipval4
index1 <- which(shipval1$DATETIME == shipval4$DATETIME)
index1
index2 <- which(shipval1$DATETIME == shipval4$DATETIME)
shipval1[C(index2-1,index2),]
shipval1[index2,]
shipval1[c(index2-1,index2),]
#<- which(shipval1$DATETIME == shipval4$DATETIME)
final = shipval1[c(index2-1,index2),]
View(final)
shipval4
shipval1 <- df %>%
as_tibble() %>%
filter(SHIPNAME == sheep) %>%
mutate(
newdatetime = ymd_hms(DATETIME)
) %>%
arrange(newdatetime)
shipval2 <- shipval1 %>%
select(LON,LAT) %>%
data.matrix(rownames.force = NA)
shipval4<-shipval1 %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563)) %>%
slice(which.max(distns))
shipval4
view(shipval4)
View(shipval4)
#<- which(shipval1$DATETIME == shipval4$DATETIME)
final = shipval1[c(index2+1,index2),]
shiny::runApp('Desktop/semantic')
runApp('C:/ship')
df2
runApp('C:/ship')
runApp('C:/ship')
Csv_ship_read<- function(){
df<- read.csv("C://Users//g559541//Downloads//ships_04112020//ships.csv")
by_cyl <- df %>%
filter(is_parked ==0) %>%
group_by(ship_type) %>%
group_modify(~ maxlonglatShiptype(.))
maxlonglatShipname <- function(b){
# if(b$SHIP_ID == 352928)
# {
#
#   browser()
# }
ad <- b %>%
mutate(
newdatetime = ymd_hms(DATETIME)) %>%
distinct(newdatetime, .keep_all = TRUE) %>%
arrange(newdatetime)
shipval2 <- ad %>%
select(LON,LAT) %>%
data.matrix(rownames.force = NA)
#browser()
ad2<-ad %>%
mutate(
distns = distGeo(shipval2, a=6378137, f=1/298.257223563)) %>%
mutate(distns=lag(distns)) %>%
na.omit() %>%
slice(which.max(distns))
if(nrow(ad2) > 1 ){
time_to_use <- max(ad2$DATETIME)
}
else{
time_to_use <- unique(ad2$DATETIME)
}
#print(length(ad2))
index2<- which(ad$DATETIME ==time_to_use)
ad[c(index2-1,index2),] %>%
mutate(distance= ad2$distns)
}
maxlonglatShiptype<- function(a){
a %>%
group_by(SHIPNAME) %>%
group_modify(~ maxlonglatShipname(.))
}
}
runApp('C:/ship')
?span
labelMandatory <- function(label) {
tagList(
label,
span("*", class = "mandatory_star")
)
}
runApp('C:/ship')
?span
runApp('C:/ship')
runApp('C:/ship')
runApp('C:/ship')
?awesomeIcons
install.packages('rsconnect')
rsconnect::setAccountInfo(name='narayanansiyer',
token='F2CAB49DDFF235A0604351D9EF39A96E',
secret='ie7ONyX6YUNutdeDSZmaHBTzlPnLPnevdnAQf1Ap')
setwd("C:/ship")
usethis::use_testthat()
